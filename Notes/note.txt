---------- This is the note page where pertinant notes and their corresponding code snippets will be logged ----------
              
              ----- This is done for legibility purposes, as notes in the code can be visually conflicting -----



------  To-do -----

----- Home page needs: -----

A call to action. One or two simple, eye-catching elements that direct the user 
to do a thing. Maybe "See our listings!" that redirects to all properties.


Fix space between slider picture and buttons

add css to buttons on the slider

adjust font and color of the text throughout the site

Add a media query to organize the text and pictures for different screen sizes

Fix the picture stacking effect for smaller screens in the "testimonials" section
this will probably need to be fixed with a media query

Add real text to "testimonials" section

Add font-awesome so rating-stars show up




---- All properties page needs:  -----

H1 and property links centered. Consider adding a search feature utilizing a sorting algorithm.

NOTE: to search, consider making the links and search dynamic. define city, state and maybe a series
of fixed prices as variables. The fixed prices would come from a dropdown menu. 

Before this, consider also adding more cities as hard coded values, and adding pagination.
It is important to note that the search result may need to be paginated as well. 

This can be broken into a stretch goal. A compromise would be pagination with a city search function.



---- New Property page needs: -----

consider adjusting font weight and style.

Center content and add padding to the button or space the button away
from the bottom of the last text field

consider adding an animation while the page "loads" the new property.



---- Show Property Page needs: ----

Descriptive text for each field. I.E. city, state, zip.

center all elements on the page. Consider adding a border radius effect to the image. 

Pictures need to be re-sized similarly to the slider. Base the dimensions on the smallest picture




---- Misc Needs ----

Once a user is logged in, the login button should disappear. The Register button should also
disappear as well.

once a user is logged out, display a message stating the user has been logged out.

When a user registers a new account, a brief profile page is seen.
Add a profile page where a user can keep track of their listings. 

Add functionality to add listings or "like" them. "liked" listings will be added to the user's profile.

SOCIAL MEDIA LINKS IN FOOTER!!!

---- other ideas ----
Add "realtor chat" function 






---------- Controllers ----------

// Properties Index

router.get("/", (req, res) => {
  NOTE Query the DB for all properties with an empty object {}, (no criteria at this time)
  db.Property.find({}, (err, allProperties) => {
    if (err) return console.log(err);

     NOTE Log all properties
    console.log("All Properties = ", allProperties);

    res.render("properties/index", {
      properties: allProperties,
    });
  });
});


// Show Property

router.get("/:id", (req, res) => {
  NOTE Query the database for the author by ID
  db.Property.findById(req.params.id, (err, foundProperty) => {
    if (err) return console.log(err);

    res.render("properties/show", {
      property: foundProperty,
    });
  });
});

// Create Property


router.post("/", (req, res) => {
  NOTE configure body parser
  NOTE Query the database to create a new record

  NOTE Log the request body
  console.log("Request body= ", req.body);

  db.Property.create(req.body, (err, newProperty) => {
    if (err) return console.log(err);

    NOTE Log the new property
    console.log("New Property = ", newProperty);

    NOTE Redirect to the properties index page or the show page
    res.redirect("/properties");
  });
});

---------- Server.JS Notes ----------


NOTE Method-override to later change POST request to a PUT request

const methodOverride = require("method-override");

NOTE saving all of the functionality of the express var to app as express() returns an object
can later invoke express() and it's methods thru app. 

const app = express();

NOTE looks at process that is running. In this app it is node.
 through node we can access the environment, which is the global object.
 can create vars within the env object.
 when we deploy, we are looking for a var within the env called PORT. If it exists, we will use it.
 if one does not exist, and we are working locally then const PORT = process.env.PORT || 4000; is acceptable 

const PORT = process.env.PORT || 4000;


---------- New.EJS ----------

 <h1>Add New Property</h1>
     
    NOTE  <!-- "Cannot POST /properties" is the error we get here, it means that
    there is either a typo / syntax error or that we have not created our route
    No route currently exists for create/"POST"-->

      <form action="/properties" method="POST">
        <label for="city">City</label>
        <input type="text" id="city" name="city" />

        <button type="submit">Add Property</button>
      </form>